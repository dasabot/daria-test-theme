{% comment %}
  Renders a product card

  Accepts:
  - card_product: {Object} Product Liquid object (optional)
  - media_aspect_ratio: {String} Size of the product image card. Values are "square" and "portrait". Default is "square" (optional)
  - image_shape: {String} Image mask to apply to the product image card. Values are "arch", "blob", "chevronleft", "chevronright", "diamond", "parallelogram", and "round". (optional)
  - show_secondary_image: {Boolean} Show the secondary image on hover. Default: false (optional)
  - show_vendor: {Boolean} Show the product vendor. Default: false
  - show_rating: {Boolean} Show the product rating. Default: false
  - extend_height: {Boolean} Card height extends to available container space. Default: true (optional)
  - lazy_load: {Boolean} Image should be lazy loaded. Default: true (optional)
  - skip_styles: {Boolean} Don't include component styles. Useful when rendering multiple product cards in a loop. Default: false (optional)
  - quick_add: {Boolean} Show the quick add button.
  - section_id: {String} The ID of the section that contains this card.
  - horizontal_class: {Boolean} Add a card--horizontal class if set to true. Default: false (optional)
  - horizontal_quick_add: {Boolean} Changes the quick add button styles when set to true. Default: false (optional)
  - placeholder_image: {String} The placeholder image to use when no product exists. Default: 'product-apparel-2' (optional)

  Usage:
  {% render 'card-product', show_vendor: section.settings.show_vendor %}
{% endcomment %}
{%- unless skip_styles -%}
  {{ 'component-rating.css' | asset_url | stylesheet_tag }}
  {{ 'component-volume-pricing.css' | asset_url | stylesheet_tag }}
  {{ 'component-price.css' | asset_url | stylesheet_tag }}
{%- endunless -%}

{% assign color_option_index = 0 %}
{% for option in card_product.options_with_values %}
  {% if option.name == 'Color' %}
    {% assign color_option_index = forloop.index0 %}
  {% endif %}
{% endfor %}

<div class="product-card">
  <div class="badge">on sale</div>
  <a href="/" style="max-width: 100px">
    {% assign initial_variant = card_product.selected_or_first_available_variant %}
    {% assign initial_main_image = initial_variant.metafields.custom.main_image | image_url: width: 100 %}
    {% assign initial_hover_image = initial_variant.metafields.custom.hover_image | image_url: width: 100 %}

    <img
      id="product-image"
      src="{{ initial_main_image | image_url }}"
      data-main="{{ initial_main_image }}"
      data-hover="{{ initial_hover_image }}"
      alt="{{ initial_variant.title | escape }}"
      class="motion-reduce"
      loading="lazy"
      width="100"
      height="100"
    >
  </a>

  <div class="swatches">
    {% assign colors = '' %}
    {% for variant in card_product.variants %}
      {% assign color = variant.options[color_option_index] %}
      {% unless colors contains color %}
        {% assign colors = colors | append: color | append: ',' %}

        {% if variant.id == card_product.selected_or_first_available_variant.id %}
          {% assign is_selected = true %}
        {% else %}
          {% assign is_selected = false %}
        {% endif %}

        <button
          id="variant-{{ variant.id }}"
          class="w-6 h-6 rounded-full border {% if is_selected %}border-blue-600{% else %}border-gray-300{% endif %} mr-2"
          style="background-color: {{ variant.metafields.custom.color_hex | default: '#fff' }};"
          onclick="selectVariant('{{ card_product.id }}', '{{ variant.id }}', '{{ variant.price }}', '{{ variant.compare_at_price }}', '{{ variant.metafields.custom.main_image | image_url }}', '{{ variant.metafields.custom.hover_image | image_url }}')"
          title="{{ color }}"
        ></button>
      {% endunless %}
    {% endfor %}
  </div>
  <div class="info">
    <span>{{ card_product.metafields.custom.brand }}</span>
    <span>{{ card_product.title }}</span>
  </div>
  <div class="price">
    <span id="{{card_product.id}}-compare-price">
      {{- card_product.selected_or_first_available_variant.compare_at_price -}}
    </span>
    <span id="{{card_product.id}}-price">{{ card_product.selected_or_first_available_variant.price }}</span>
  </div>
</div>

<script>
  function selectVariant(productId, variantId, variantPrice, variantCompareAtPrice, mainImageUrl, hoverImageUrl) {
    if (!mainImageUrl) {
      console.error('Main image URL is not provided');
      return;
    }

    const productImage = document.getElementById('product-image');
    if (productImage) {
      productImage.src = mainImageUrl;
    }

    productImage.addEventListener('mouseover', function () {
      productImage.src = hoverImageUrl;
    });

    productImage.addEventListener('mouseout', function () {
      productImage.src = mainImageUrl;
    });

    const buttons = document.querySelectorAll('.swatches button');
    buttons.forEach((button) => {
      button.classList.remove('border-blue-600');
      button.classList.add('border-gray-300');
    });

    const selectedButton = document.getElementById(`variant-${variantId}`);
    if (selectedButton) {
      selectedButton.classList.add('border-blue-600');
    }

    const price = document.getElementById(`${productId}-price`);
    price.innerText = `now: ${variantPrice}`;

    if (variantCompareAtPrice !== '0') {
      const compareAtPrice = document.getElementById(`${productId}-compare-price`);
      compareAtPrice.innerText = `before: ${variantCompareAtPrice}`;
    }
  }

  document.addEventListener('DOMContentLoaded', function () {
    const productImage = document.getElementById('product-image');

    if (productImage) {
      productImage.addEventListener('mouseover', () => {
        const hoverSrc = productImage.getAttribute('data-hover');
        if (hoverSrc) productImage.src = hoverSrc;
      });

      productImage.addEventListener('mouseout', () => {
        const mainSrc = productImage.getAttribute('data-main');
        if (mainSrc) productImage.src = mainSrc;
      });
    }
  });
</script>
